// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: Device.proto

package device

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type OSSInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OssEndpoint        string `protobuf:"bytes,1,opt,name=oss_endpoint,json=ossEndpoint,proto3" json:"oss_endpoint,omitempty"`
	OssBucket          string `protobuf:"bytes,2,opt,name=oss_bucket,json=ossBucket,proto3" json:"oss_bucket,omitempty"`
	OssAccessKeyID     string `protobuf:"bytes,3,opt,name=oss_accessKeyID,json=ossAccessKeyID,proto3" json:"oss_accessKeyID,omitempty"`
	OssAccessKeySecret string `protobuf:"bytes,4,opt,name=oss_accessKeySecret,json=ossAccessKeySecret,proto3" json:"oss_accessKeySecret,omitempty"`
}

func (x *OSSInfo) Reset() {
	*x = OSSInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSSInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSSInfo) ProtoMessage() {}

func (x *OSSInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSSInfo.ProtoReflect.Descriptor instead.
func (*OSSInfo) Descriptor() ([]byte, []int) {
	return file_Device_proto_rawDescGZIP(), []int{0}
}

func (x *OSSInfo) GetOssEndpoint() string {
	if x != nil {
		return x.OssEndpoint
	}
	return ""
}

func (x *OSSInfo) GetOssBucket() string {
	if x != nil {
		return x.OssBucket
	}
	return ""
}

func (x *OSSInfo) GetOssAccessKeyID() string {
	if x != nil {
		return x.OssAccessKeyID
	}
	return ""
}

func (x *OSSInfo) GetOssAccessKeySecret() string {
	if x != nil {
		return x.OssAccessKeySecret
	}
	return ""
}

type OSSTrueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info   *OSSInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Clean  bool     `protobuf:"varint,2,opt,name=clean,proto3" json:"clean,omitempty"`
	Sign   string   `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
	TempID string   `protobuf:"bytes,4,opt,name=tempID,proto3" json:"tempID,omitempty"`
}

func (x *OSSTrueReq) Reset() {
	*x = OSSTrueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSSTrueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSSTrueReq) ProtoMessage() {}

func (x *OSSTrueReq) ProtoReflect() protoreflect.Message {
	mi := &file_Device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSSTrueReq.ProtoReflect.Descriptor instead.
func (*OSSTrueReq) Descriptor() ([]byte, []int) {
	return file_Device_proto_rawDescGZIP(), []int{1}
}

func (x *OSSTrueReq) GetInfo() *OSSInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *OSSTrueReq) GetClean() bool {
	if x != nil {
		return x.Clean
	}
	return false
}

func (x *OSSTrueReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *OSSTrueReq) GetTempID() string {
	if x != nil {
		return x.TempID
	}
	return ""
}

type ResultReplyOSS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Data   *OSSInfo `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ResultReplyOSS) Reset() {
	*x = ResultReplyOSS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultReplyOSS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultReplyOSS) ProtoMessage() {}

func (x *ResultReplyOSS) ProtoReflect() protoreflect.Message {
	mi := &file_Device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultReplyOSS.ProtoReflect.Descriptor instead.
func (*ResultReplyOSS) Descriptor() ([]byte, []int) {
	return file_Device_proto_rawDescGZIP(), []int{2}
}

func (x *ResultReplyOSS) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResultReplyOSS) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ResultReplyOSS) GetData() *OSSInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type LoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Pkc      string `protobuf:"bytes,3,opt,name=Pkc,proto3" json:"Pkc,omitempty"`
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_Device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_Device_proto_rawDescGZIP(), []int{3}
}

func (x *LoginReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginReq) GetPkc() string {
	if x != nil {
		return x.Pkc
	}
	return ""
}

type ResultReplyLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Pkc    string   `protobuf:"bytes,3,opt,name=Pkc,proto3" json:"Pkc,omitempty"`
	Data   *OSSInfo `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	TempID string   `protobuf:"bytes,5,opt,name=tempID,proto3" json:"tempID,omitempty"`
}

func (x *ResultReplyLogin) Reset() {
	*x = ResultReplyLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultReplyLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultReplyLogin) ProtoMessage() {}

func (x *ResultReplyLogin) ProtoReflect() protoreflect.Message {
	mi := &file_Device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultReplyLogin.ProtoReflect.Descriptor instead.
func (*ResultReplyLogin) Descriptor() ([]byte, []int) {
	return file_Device_proto_rawDescGZIP(), []int{4}
}

func (x *ResultReplyLogin) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResultReplyLogin) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ResultReplyLogin) GetPkc() string {
	if x != nil {
		return x.Pkc
	}
	return ""
}

func (x *ResultReplyLogin) GetData() *OSSInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResultReplyLogin) GetTempID() string {
	if x != nil {
		return x.TempID
	}
	return ""
}

type ComputeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash   string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Pk1    string `protobuf:"bytes,2,opt,name=Pk1,proto3" json:"Pk1,omitempty"`
	Sign   string `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
	TempID string `protobuf:"bytes,4,opt,name=tempID,proto3" json:"tempID,omitempty"`
}

func (x *ComputeReq) Reset() {
	*x = ComputeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeReq) ProtoMessage() {}

func (x *ComputeReq) ProtoReflect() protoreflect.Message {
	mi := &file_Device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeReq.ProtoReflect.Descriptor instead.
func (*ComputeReq) Descriptor() ([]byte, []int) {
	return file_Device_proto_rawDescGZIP(), []int{5}
}

func (x *ComputeReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ComputeReq) GetPk1() string {
	if x != nil {
		return x.Pk1
	}
	return ""
}

func (x *ComputeReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *ComputeReq) GetTempID() string {
	if x != nil {
		return x.TempID
	}
	return ""
}

type ResultReplyCompute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	S      string `protobuf:"bytes,3,opt,name=S,proto3" json:"S,omitempty"`
}

func (x *ResultReplyCompute) Reset() {
	*x = ResultReplyCompute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Device_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultReplyCompute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultReplyCompute) ProtoMessage() {}

func (x *ResultReplyCompute) ProtoReflect() protoreflect.Message {
	mi := &file_Device_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultReplyCompute.ProtoReflect.Descriptor instead.
func (*ResultReplyCompute) Descriptor() ([]byte, []int) {
	return file_Device_proto_rawDescGZIP(), []int{6}
}

func (x *ResultReplyCompute) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResultReplyCompute) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ResultReplyCompute) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

type PasswdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewPassword string `protobuf:"bytes,1,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
	Sign        string `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"`
	TempID      string `protobuf:"bytes,3,opt,name=tempID,proto3" json:"tempID,omitempty"`
}

func (x *PasswdReq) Reset() {
	*x = PasswdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Device_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswdReq) ProtoMessage() {}

func (x *PasswdReq) ProtoReflect() protoreflect.Message {
	mi := &file_Device_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswdReq.ProtoReflect.Descriptor instead.
func (*PasswdReq) Descriptor() ([]byte, []int) {
	return file_Device_proto_rawDescGZIP(), []int{7}
}

func (x *PasswdReq) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

func (x *PasswdReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *PasswdReq) GetTempID() string {
	if x != nil {
		return x.TempID
	}
	return ""
}

type ResultReplyPasswd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ResultReplyPasswd) Reset() {
	*x = ResultReplyPasswd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Device_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultReplyPasswd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultReplyPasswd) ProtoMessage() {}

func (x *ResultReplyPasswd) ProtoReflect() protoreflect.Message {
	mi := &file_Device_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultReplyPasswd.ProtoReflect.Descriptor instead.
func (*ResultReplyPasswd) Descriptor() ([]byte, []int) {
	return file_Device_proto_rawDescGZIP(), []int{8}
}

func (x *ResultReplyPasswd) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResultReplyPasswd) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

var File_Device_proto protoreflect.FileDescriptor

var file_Device_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x07, 0x4f, 0x53, 0x53, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x73, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x73, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x2f, 0x0a,
	0x13, 0x6f, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x73, 0x73, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x73,
	0x0a, 0x0a, 0x4f, 0x53, 0x53, 0x54, 0x72, 0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4f, 0x53, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x65, 0x6d, 0x70, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6d,
	0x70, 0x49, 0x44, 0x22, 0x61, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x4f, 0x53, 0x53, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x53, 0x53, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x54, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x6b,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x50, 0x6b, 0x63, 0x22, 0x8d, 0x01, 0x0a,
	0x10, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x50, 0x6b, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x50, 0x6b, 0x63, 0x12,
	0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x53, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6d, 0x70, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6d, 0x70, 0x49, 0x44, 0x22, 0x5e, 0x0a, 0x0a,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x10,
	0x0a, 0x03, 0x50, 0x6b, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x50, 0x6b, 0x31,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x69, 0x67, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6d, 0x70, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6d, 0x70, 0x49, 0x44, 0x22, 0x4e, 0x0a, 0x12,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0c,
	0x0a, 0x01, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x53, 0x22, 0x5a, 0x0a, 0x09,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x64, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6d, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x65, 0x6d, 0x70, 0x49, 0x44, 0x22, 0x3f, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x32, 0xb5, 0x02, 0x0a, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x4f, 0x53, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x0f, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x53,
	0x53, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4f, 0x53, 0x53, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x0d, 0x4f, 0x53, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x12, 0x12, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x53, 0x53, 0x54, 0x72, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4f, 0x53, 0x53, 0x22, 0x00, 0x12, 0x39,
	0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x08, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x53, 0x12, 0x12, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x06, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x64, 0x12, 0x11, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x64, 0x22,
	0x00, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Device_proto_rawDescOnce sync.Once
	file_Device_proto_rawDescData = file_Device_proto_rawDesc
)

func file_Device_proto_rawDescGZIP() []byte {
	file_Device_proto_rawDescOnce.Do(func() {
		file_Device_proto_rawDescData = protoimpl.X.CompressGZIP(file_Device_proto_rawDescData)
	})
	return file_Device_proto_rawDescData
}

var file_Device_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_Device_proto_goTypes = []interface{}{
	(*OSSInfo)(nil),            // 0: device.OSSInfo
	(*OSSTrueReq)(nil),         // 1: device.OSSTrueReq
	(*ResultReplyOSS)(nil),     // 2: device.ResultReplyOSS
	(*LoginReq)(nil),           // 3: device.LoginReq
	(*ResultReplyLogin)(nil),   // 4: device.ResultReplyLogin
	(*ComputeReq)(nil),         // 5: device.ComputeReq
	(*ResultReplyCompute)(nil), // 6: device.ResultReplyCompute
	(*PasswdReq)(nil),          // 7: device.PasswdReq
	(*ResultReplyPasswd)(nil),  // 8: device.ResultReplyPasswd
}
var file_Device_proto_depIdxs = []int32{
	0, // 0: device.OSSTrueReq.info:type_name -> device.OSSInfo
	0, // 1: device.ResultReplyOSS.data:type_name -> device.OSSInfo
	0, // 2: device.ResultReplyLogin.data:type_name -> device.OSSInfo
	0, // 3: device.Device.OSSInfoCheck:input_type -> device.OSSInfo
	1, // 4: device.Device.OSSInfoSubmit:input_type -> device.OSSTrueReq
	3, // 5: device.Device.AuthLogin:input_type -> device.LoginReq
	5, // 6: device.Device.ComputeS:input_type -> device.ComputeReq
	7, // 7: device.Device.Passwd:input_type -> device.PasswdReq
	2, // 8: device.Device.OSSInfoCheck:output_type -> device.ResultReplyOSS
	2, // 9: device.Device.OSSInfoSubmit:output_type -> device.ResultReplyOSS
	4, // 10: device.Device.AuthLogin:output_type -> device.ResultReplyLogin
	6, // 11: device.Device.ComputeS:output_type -> device.ResultReplyCompute
	8, // 12: device.Device.Passwd:output_type -> device.ResultReplyPasswd
	8, // [8:13] is the sub-list for method output_type
	3, // [3:8] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_Device_proto_init() }
func file_Device_proto_init() {
	if File_Device_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSSInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSSTrueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultReplyOSS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultReplyLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Device_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultReplyCompute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Device_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Device_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultReplyPasswd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Device_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_Device_proto_goTypes,
		DependencyIndexes: file_Device_proto_depIdxs,
		MessageInfos:      file_Device_proto_msgTypes,
	}.Build()
	File_Device_proto = out.File
	file_Device_proto_rawDesc = nil
	file_Device_proto_goTypes = nil
	file_Device_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeviceClient is the client API for Device service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceClient interface {
	OSSInfoCheck(ctx context.Context, in *OSSInfo, opts ...grpc.CallOption) (*ResultReplyOSS, error)
	OSSInfoSubmit(ctx context.Context, in *OSSTrueReq, opts ...grpc.CallOption) (*ResultReplyOSS, error)
	AuthLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*ResultReplyLogin, error)
	ComputeS(ctx context.Context, in *ComputeReq, opts ...grpc.CallOption) (*ResultReplyCompute, error)
	Passwd(ctx context.Context, in *PasswdReq, opts ...grpc.CallOption) (*ResultReplyPasswd, error)
}

type deviceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceClient(cc grpc.ClientConnInterface) DeviceClient {
	return &deviceClient{cc}
}

func (c *deviceClient) OSSInfoCheck(ctx context.Context, in *OSSInfo, opts ...grpc.CallOption) (*ResultReplyOSS, error) {
	out := new(ResultReplyOSS)
	err := c.cc.Invoke(ctx, "/device.Device/OSSInfoCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) OSSInfoSubmit(ctx context.Context, in *OSSTrueReq, opts ...grpc.CallOption) (*ResultReplyOSS, error) {
	out := new(ResultReplyOSS)
	err := c.cc.Invoke(ctx, "/device.Device/OSSInfoSubmit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) AuthLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*ResultReplyLogin, error) {
	out := new(ResultReplyLogin)
	err := c.cc.Invoke(ctx, "/device.Device/AuthLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) ComputeS(ctx context.Context, in *ComputeReq, opts ...grpc.CallOption) (*ResultReplyCompute, error) {
	out := new(ResultReplyCompute)
	err := c.cc.Invoke(ctx, "/device.Device/ComputeS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceClient) Passwd(ctx context.Context, in *PasswdReq, opts ...grpc.CallOption) (*ResultReplyPasswd, error) {
	out := new(ResultReplyPasswd)
	err := c.cc.Invoke(ctx, "/device.Device/Passwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServer is the server API for Device service.
type DeviceServer interface {
	OSSInfoCheck(context.Context, *OSSInfo) (*ResultReplyOSS, error)
	OSSInfoSubmit(context.Context, *OSSTrueReq) (*ResultReplyOSS, error)
	AuthLogin(context.Context, *LoginReq) (*ResultReplyLogin, error)
	ComputeS(context.Context, *ComputeReq) (*ResultReplyCompute, error)
	Passwd(context.Context, *PasswdReq) (*ResultReplyPasswd, error)
}

// UnimplementedDeviceServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceServer struct {
}

func (*UnimplementedDeviceServer) OSSInfoCheck(context.Context, *OSSInfo) (*ResultReplyOSS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OSSInfoCheck not implemented")
}
func (*UnimplementedDeviceServer) OSSInfoSubmit(context.Context, *OSSTrueReq) (*ResultReplyOSS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OSSInfoSubmit not implemented")
}
func (*UnimplementedDeviceServer) AuthLogin(context.Context, *LoginReq) (*ResultReplyLogin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLogin not implemented")
}
func (*UnimplementedDeviceServer) ComputeS(context.Context, *ComputeReq) (*ResultReplyCompute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeS not implemented")
}
func (*UnimplementedDeviceServer) Passwd(context.Context, *PasswdReq) (*ResultReplyPasswd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Passwd not implemented")
}

func RegisterDeviceServer(s *grpc.Server, srv DeviceServer) {
	s.RegisterService(&_Device_serviceDesc, srv)
}

func _Device_OSSInfoCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OSSInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).OSSInfoCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Device/OSSInfoCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).OSSInfoCheck(ctx, req.(*OSSInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_OSSInfoSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OSSTrueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).OSSInfoSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Device/OSSInfoSubmit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).OSSInfoSubmit(ctx, req.(*OSSTrueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_AuthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).AuthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Device/AuthLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).AuthLogin(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_ComputeS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).ComputeS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Device/ComputeS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).ComputeS(ctx, req.(*ComputeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Device_Passwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServer).Passwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Device/Passwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServer).Passwd(ctx, req.(*PasswdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Device_serviceDesc = grpc.ServiceDesc{
	ServiceName: "device.Device",
	HandlerType: (*DeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OSSInfoCheck",
			Handler:    _Device_OSSInfoCheck_Handler,
		},
		{
			MethodName: "OSSInfoSubmit",
			Handler:    _Device_OSSInfoSubmit_Handler,
		},
		{
			MethodName: "AuthLogin",
			Handler:    _Device_AuthLogin_Handler,
		},
		{
			MethodName: "ComputeS",
			Handler:    _Device_ComputeS_Handler,
		},
		{
			MethodName: "Passwd",
			Handler:    _Device_Passwd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Device.proto",
}
